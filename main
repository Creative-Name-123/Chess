import pygame
import sys
import io
import requests

# Initialize Pygame
pygame.init()

# Screen dimensions
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Chess Menu")

# Menu Options
menu_options = ["Player vs. Player (offline)", "Player vs. Player (online)", "Options", "Quit"]

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BROWN_LIGHT = (222, 184, 135)
BROWN_DARK = (139, 69, 19)
GREEN_HIGHLIGHT = (0, 255, 0, 80)  # For highlighting possible moves
DARK_HIGHLIGHT = (0, 50, 0, 200)
RED_HIGHLIGHT = (255, 0, 0, 80)   # For highlighting check (optional for now)

# Board size and square size
BOARD_SIZE = 8
SQUARE_SIZE = SCREEN_WIDTH // BOARD_SIZE // 2

# Piece representation
initial_board = [
    ['bR', 'bN', 'bB', 'bQ', 'bK', 'bB', 'bN', 'bR'],
    ['bP', 'bP', 'bP', 'bP', 'bP', 'bP', 'bP', 'bP'],
    [None, None, None, None, None, None, None, None],
    [None, None, None, None, None, None, None, None],
    [None, None, None, None, None, None, None, None],
    [None, None, None, None, None, None, None, None],
    ['wP', 'wP', 'wP', 'wP', 'wP', 'wP', 'wP', 'wP'],
    ['wR', 'wN', 'wB', 'wQ', 'wK', 'wB', 'wN', 'wR']
]

moves = []

# Deep copy of initial_board for game state
board = [row[:] for row in initial_board]

# Load Piece Images from URLs
piece_images = {}
piece_image_urls = {
    'bR': 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Chess_rdt45.svg/45px-Chess_rdt45.svg.png',
    'bN': 'https://upload.wikimedia.org/wikipedia/commons/thumb/e/ef/Chess_ndt45.svg/68px-Chess_ndt45.svg.png',
    'bB': 'https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Chess_bdt45.svg/45px-Chess_bdt45.svg.png',
    'bQ': 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/Chess_qdt45.svg/68px-Chess_qdt45.svg.png',
    'bK': 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/f0/Chess_kdt45.svg/68px-Chess_kdt45.svg.png',
    'bP': 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c7/Chess_pdt45.svg/68px-Chess_pdt45.svg.png',
    'wR': 'https://upload.wikimedia.org/wikipedia/commons/thumb/7/72/Chess_rlt45.svg/68px-Chess_rlt45.svg.png',
    'wN': 'https://upload.wikimedia.org/wikipedia/commons/thumb/7/70/Chess_nlt45.svg/68px-Chess_nlt45.svg.png',
    'wB': 'https://upload.wikimedia.org/wikipedia/commons/thumb/b/b1/Chess_blt45.svg/68px-Chess_blt45.svg.png',
    'wQ': 'https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/Chess_qlt45.svg/68px-Chess_qlt45.svg.png',
    'wK': 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/42/Chess_klt45.svg/68px-Chess_klt45.svg.png',
    'wP': 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/Chess_plt45.svg/68px-Chess_plt45.svg.png'
}

headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'}

for piece, url in piece_image_urls.items():
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        image_file = io.BytesIO(response.content)
        image = pygame.image.load(image_file).convert_alpha()
        piece_images[piece] = pygame.transform.scale(image, (SQUARE_SIZE, SQUARE_SIZE))
    except requests.exceptions.RequestException as e:
        print(f"Error downloading image from {url}: {e}")
    except pygame.error as e:
        print(f"Error loading image from URL {url}: {e}")

# --- Helper Functions ---

def get_piece_color(piece):
    if piece and piece[0] == 'w':
        return 'white'
    elif piece and piece[0] == 'b':
        return 'black'
    return None


def is_on_board(row, col):
    return 0 <= row < BOARD_SIZE and 0 <= col < BOARD_SIZE  # TODO: remove this or something?


def is_empty(board, row, col):
    return board[row][col] is None


def is_opponent(board, row, col, current_color):
    piece = board[row][col]
    if piece:
        piece_color = get_piece_color(piece)
        return piece_color is not None and piece_color != current_color
    return False


def has_moved(piece_code, start_col=None):
    for move in moves:
        if move.startswith(piece_code):
            if start_col is None or f": {start_col}," in move:
                return True
    return False


def get_pawn_attacks(board, row, col, color):
    direction = -1 if color == 'w' else 1
    attacks = []
    for dc in [-1, 1]:
        r, c = row + direction, col + dc
        if is_on_board(r, c):
            attacks.append((r, c))
    return attacks


def is_square_attacked(board, row, col, by_color):
    enemy = by_color
    directions = [(-1, -1), (-1, 0), (-1, 1),
                  (0, -1),          (0, 1),
                  (1, -1), (1, 0),  (1, 1)]
    # Pawn attacks
    direction = -1 if enemy == 'w' else 1
    for dc in [-1, 1]:
        r, c = row + direction, col + dc
        if is_on_board(r, c) and board[r][c] == enemy + 'P':
            return True
    # Knight attacks
    knight_moves = [(2, 1), (1, 2), (-1, 2), (-2, 1),
                    (-2, -1), (-1, -2), (1, -2), (2, -1)]
    for dr, dc in knight_moves:
        r, c = row + dr, col + dc
        if is_on_board(r, c) and board[r][c] == enemy + 'N':
            return True
    # Sliding pieces
    for dr, dc in directions:
        for i in range(1, 8):
            r, c = row + dr * i, col + dc * i
            if not is_on_board(r, c):
                break
            piece = board[r][c]
            if piece:
                if piece[0] == enemy:
                    p_type = piece[1]
                    if (dr == 0 or dc == 0) and p_type in ('R', 'Q'):
                        return True
                    elif (dr != 0 and dc != 0) and p_type in ('B', 'Q'):
                        return True
                break
    # King
    for dr, dc in directions:
        r, c = row + dr, col + dc
        if is_on_board(r, c) and board[r][c] == enemy + 'K':
            return True
    return False


# --- Movement Functions ---

def get_pawn_moves(board, row, col, color, up):
    moves = []
    # Determine move direction based on flip state
    if up:
        dir = -1 if color == 'w' else 1
    else:
        dir = 1 if color == 'w' else -1
    print(f"Pawn at ({row},{col}) of color {color}")
    print(f"Moving in direction: {dir}")
    one_step = row + dir
    if is_on_board(one_step, col) and is_empty(board, one_step, col):
        moves.append((one_step, col))
        if color == "w":
            starting_row = 6
        else:
            starting_row = 1
        print(row)
        if row == starting_row:  # and is_empty(board, one_step + dir, col):
            moves.append((one_step + dir, col))
    # Captures
    for dc in [-1, 1]:
        r, c = row + dir, col + dc
        if is_on_board(r, c) and is_opponent(board, r, c, color):
            moves.append((r, c))
    return moves


def get_rook_moves(board, row, col, color):
    moves = []
    for dr, dc in [(0,1),(0,-1),(1,0),(-1,0)]:
        r, c = row + dr, col + dc
        while is_on_board(r, c):
            if is_empty(board, r, c):
                moves.append((r, c))
            elif is_opponent(board, r, c, color):
                moves.append((r, c))
                break
            else:
                break
            r += dr
            c += dc
    return moves


def get_knight_moves(board, row, col, color):
    moves = []
    for dr, dc in [(-2,-1), (-2,1), (-1,-2), (-1,2), (1,-2), (1,2), (2,-1), (2,1)]:
        r, c = row + dr, col + dc
        if is_on_board(r, c):
            if is_empty(board, r, c) or is_opponent(board, r, c, color):
                moves.append((r, c))
    return moves


def get_bishop_moves(board, row, col, color):
    moves = []
    for dr, dc in [(-1,-1), (-1,1), (1,-1), (1,1)]:
        r, c = row + dr, col + dc
        while is_on_board(r, c):
            if is_empty(board, r, c):
                moves.append((r, c))
            elif is_opponent(board, r, c, color):
                moves.append((r, c))
                break
            else:
                break
            r += dr
            c += dc
    return moves


def get_queen_moves(board, row, col, color):
    return get_rook_moves(board, row, col, color) + get_bishop_moves(board, row, col, color)


def get_king_moves(board, row, col, color):
    moves = []
    for dr, dc in [(-1,-1), (-1,0), (-1,1),
                   (0,-1),           (0,1),
                   (1,-1),  (1,0),  (1,1)]:
        r, c = row + dr, col + dc
        if is_on_board(r, c):
            if is_empty(board, r, c) or is_opponent(board, r, c, color):
                moves.append((r, c))
    # Castling (simplified, no check for check or moved rook)
    if not has_moved('wK'):
        # White castling
        if not has_moved('wR') and all(board[7][i] is None for i in [5, 6]):
            moves.append((7,6))
        if not has_moved('wR') and all(board[7][i] is None for i in [1, 2, 3]):
            moves.append((7,2))
    if not has_moved('bK'):
        # Black castling
        if not has_moved('bR') and all(board[0][i] is None for i in [5, 6]):
            moves.append((0,6))
        if not has_moved('bR') and all(board[0][i] is None for i in [1, 2, 3]):
            moves.append((0,2))
    return moves


def get_all_possible_moves(board, row, col):
    piece = board[row][col]
    if not piece:
        return []
    color = get_piece_color(piece)
    p_type = piece[1]
    if p_type == 'P':
        if current_turn == "white":
            return get_pawn_moves(board, row, col, color, False)
        else:
            return get_pawn_moves(board, row, col, color, True)
    elif p_type == 'R':
        return get_rook_moves(board, row, col, color)
    elif p_type == 'N':
        return get_knight_moves(board, row, col, color)
    elif p_type == 'B':
        return get_bishop_moves(board, row, col, color)
    elif p_type == 'Q':
        return get_queen_moves(board, row, col, color)
    elif p_type == 'K':
        return get_king_moves(board, row, col, color)
    return []


def is_valid_move(board, start_row, start_col, end_row, end_col):
    return (end_row, end_col) in get_all_possible_moves(board, start_row, start_col)


def make_move(board, start_row, start_col, end_row, end_col, up):
    # Normalize positions if board is flipped
    if not up:
        start_row, start_col = 7 - start_row, 7 - start_col
        end_row, end_col = 7 - end_row, 7 - end_col

    piece = board[start_row][start_col]
    if not piece:
        return
    # Record move
    move_record = f"{piece}: {start_col}, {start_row} to {end_col}, {end_row}"
    moves.append(move_record)
    print(move_record)

    # Handle castling for king
    if piece[1] == 'K':
        # King side
        if end_col == 6:
            # move rook
            if piece == 'wK':
                board[7][5] = board[7][7]
                board[7][7] = None
            else:
                board[0][5] = board[0][7]
                board[0][7] = None
        # Queen side
        elif end_col == 2:
            if piece == 'wK':
                board[7][3] = board[7][0]
                board[7][0] = None
            else:
                board[0][3] = board[0][0]
                board[0][0] = None

    # Handle pawn promotion
    if piece[1] == 'P':
        if (end_row == 0 and piece[0] == 'w') or (end_row == 7 and piece[0] == 'b'):
            # Promote to Queen for simplicity
            promoted_piece = piece[0] + 'Q'
            board[end_row][end_col] = promoted_piece
            board[start_row][start_col] = None
            return

    # Move the piece
    board[end_row][end_col] = piece
    board[start_row][start_col] = None


def switch_turn():
    global current_turn
    current_turn = 'black' if current_turn == 'white' else 'white'


# --- Coordinate Transformation Helpers ---

def get_display_position(row, col, up):
    if up:
        return row, col
    else:
        return 7 - row, 7 - col


def get_board_position(mouse_x, mouse_y, up):
    col = mouse_x // SQUARE_SIZE
    row = (mouse_y - 100) // SQUARE_SIZE
    if not up:
        return 7 - row, 7 - col
    return row, col


# --- Drawing Functions ---

def draw_board(up):
    for row in range(BOARD_SIZE):
        for col in range(BOARD_SIZE):
            color = BROWN_LIGHT if (row + col) % 2 == 0 else BROWN_DARK
            x = col * SQUARE_SIZE
            y = row * SQUARE_SIZE + 100
            if not up:
                # When flipped, invert row for drawing
                display_row, display_col = get_display_position(row, col, up)
                x = display_col * SQUARE_SIZE
                y = display_row * SQUARE_SIZE + 100
            pygame.draw.rect(screen, color, (x, y, SQUARE_SIZE, SQUARE_SIZE))


def draw_pieces(board, piece_images, up):
    for row in range(BOARD_SIZE):
        for col in range(BOARD_SIZE):
            piece = board[row][col]
            if piece and piece in piece_images:
                display_row, display_col = get_display_position(row, col, up)
                x = display_col * SQUARE_SIZE
                y = display_row * SQUARE_SIZE + 100
                screen.blit(piece_images[piece], (x, y))
            elif piece:
                # fallback: draw text
                display_row, display_col = get_display_position(row, col, up)
                x = display_col * SQUARE_SIZE + SQUARE_SIZE // 2
                y = display_row * SQUARE_SIZE + 100 + SQUARE_SIZE // 2
                font = pygame.font.Font(None, 36)
                text = font.render(piece, True, WHITE if piece[0] == 'b' else BLACK)
                text_rect = text.get_rect(center=(x, y))
                screen.blit(text, text_rect)


def draw_possible_moves(possible_moves, up):
    for row, col in possible_moves:
        display_row, display_col = get_display_position(row, col, up)
        x = display_col * SQUARE_SIZE
        y = display_row * SQUARE_SIZE + 100
        s = pygame.Surface((SQUARE_SIZE, SQUARE_SIZE), pygame.SRCALPHA)
        s.fill(GREEN_HIGHLIGHT)
        screen.blit(s, (x, y))


def draw_selected_piece(selected_piece_pos, up):
    if selected_piece_pos:
        row, col = selected_piece_pos
        display_row, display_col = get_display_position(row, col, up)
        x = display_col * SQUARE_SIZE
        y = display_row * SQUARE_SIZE + 100
        pygame.draw.rect(screen, (255, 255, 0), (x, y, SQUARE_SIZE, SQUARE_SIZE), 3)

# --- Main Loop ---

current_turn = 'white'
selected_piece_pos = None
possible_moves = []
up = True  # True for normal, False for flipped

running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        elif event.type == pygame.KEYDOWN:  # When the 'f' key is pressed
            if event.key == pygame.K_f:
                # Toggle flip
                up = not up

        elif event.type == pygame.MOUSEBUTTONDOWN:
            mouse_x, mouse_y = event.pos
            if 100 < mouse_y < 100 + BOARD_SIZE * SQUARE_SIZE:
                clicked_row, clicked_col = get_board_position(mouse_x, mouse_y, up)

                if selected_piece_pos is None:
                    # Select a piece
                    if current_turn == 'white':
                        piece_at_click = board[clicked_row][clicked_col]
                    else:
                        # For flipped, selection is from inverted position
                        piece_at_click = board[clicked_row][clicked_col]
                    if piece_at_click and get_piece_color(piece_at_click) == current_turn:
                        selected_piece_pos = (clicked_row, clicked_col)
                        possible_moves = get_all_possible_moves(board, clicked_row, clicked_col)
                else:
                    # Make move
                    start_row, start_col = selected_piece_pos
                    if not up:
                        start_row, start_col = 7 - start_row, 7 - start_col
                        end_row, end_col = 7 - clicked_row, 7 - clicked_col
                    else:
                        end_row, end_col = clicked_row, clicked_col

                    if is_valid_move(board, start_row, start_col, end_row, end_col):
                        make_move(board, start_row, start_col, end_row, end_col, up)
                        switch_turn()
                    # Deselect after move attempt
                    selected_piece_pos = None
                    possible_moves = []

    # Drawing
    screen.fill(DARK_HIGHLIGHT)
    draw_board(up)
    draw_pieces(board, piece_images, up)
    draw_possible_moves(possible_moves, up)
    draw_selected_piece(selected_piece_pos, up)

    pygame.display.flip()

pygame.quit()
sys.exit()
